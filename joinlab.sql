-- 1. List the number of films per category
select category_id, count(film_id) from film_category group by category_id;

-- 2. Retreat the store id, city, and country for each store

select store.store_id, address, city, country
from store
join address 
on store.address_id=address.address_id 
join city 
on address.city_id=city.city_id
join country
on city.country_id=country.country_id;

-- 3.  Calculate the total revenue generated by each store in dollars.

select store.store_id,
count(payment.payment_id) as transactions,
sum(payment.amount) as total_revenue
from store
join staff on store.store_id=staff.store_id
join payment on payment.staff_id=staff.staff_id
group by store.store_id;

-- 4.  Determine the average running time of films for each category.

select round(avg(length),2) as average_film_length, category.name
from film
join film_category on film_category.film_id=film.film_id
join category on category.category_id=film_category.category_id
group by film_category.category_id;

-- 5.  Identify the film categories with the longest average running time. (I made it a Top 5)

select round(avg(length),2) as average_film_length, category.name
from film
join film_category on film_category.film_id=film.film_id
join category on category.category_id=film_category.category_id
group by film_category.category_id
order by average_film_length desc
limit 5;

-- 6.  Display the top 10 most frequently rented movies in descending order.

select film.film_id, film.title, count(rental.rental_id) as rental_count
from film
join inventory on film.film_id = inventory.film_id
join rental on inventory.inventory_id = rental.inventory_id
group by film.film_id, film.title
order by rental_count desc
limit 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

select film.title, inventory.store_id, rental.rental_id
from film
join inventory on inventory.film_id=film.film_id
join rental on rental.inventory_id=inventory.inventory_id
where store_id=1 and title="ACADEMY DINOSAUR";

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."

select count(distinct title) from film; -- 1000 films
select count(distinct film_id) from inventory; -- 958 films in inventorySELECT

select distinct film.film_id, film.title,
    case
        when IFNULL(inventory.film_id, 0)=0 then 'Not Available'
        else 'Available'
	end as inventory_status
from film
left join inventory on film.film_id=inventory.film_id
order by film.film_id;


